// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/proto/v1alpha1/longrunningoperation.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/nokamoto/kaas-operator-prototype/pkg/api/proto/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LongRunningOperationServiceName is the fully-qualified name of the LongRunningOperationService
	// service.
	LongRunningOperationServiceName = "api.proto.v1alpha1.LongRunningOperationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LongRunningOperationServiceGetOperationProcedure is the fully-qualified name of the
	// LongRunningOperationService's GetOperation RPC.
	LongRunningOperationServiceGetOperationProcedure = "/api.proto.v1alpha1.LongRunningOperationService/GetOperation"
	// LongRunningOperationServiceListOperationsProcedure is the fully-qualified name of the
	// LongRunningOperationService's ListOperations RPC.
	LongRunningOperationServiceListOperationsProcedure = "/api.proto.v1alpha1.LongRunningOperationService/ListOperations"
)

// LongRunningOperationServiceClient is a client for the
// api.proto.v1alpha1.LongRunningOperationService service.
type LongRunningOperationServiceClient interface {
	// GetOperation retrieves the details of a long-running operation by its name.
	GetOperation(context.Context, *connect.Request[v1alpha1.GetOperationRequest]) (*connect.Response[v1alpha1.LongRunningOperation], error)
	// ListOperations lists all long-running operations.
	ListOperations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.ListOperationsResponse], error)
}

// NewLongRunningOperationServiceClient constructs a client for the
// api.proto.v1alpha1.LongRunningOperationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLongRunningOperationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LongRunningOperationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	longRunningOperationServiceMethods := v1alpha1.File_api_proto_v1alpha1_longrunningoperation_proto.Services().ByName("LongRunningOperationService").Methods()
	return &longRunningOperationServiceClient{
		getOperation: connect.NewClient[v1alpha1.GetOperationRequest, v1alpha1.LongRunningOperation](
			httpClient,
			baseURL+LongRunningOperationServiceGetOperationProcedure,
			connect.WithSchema(longRunningOperationServiceMethods.ByName("GetOperation")),
			connect.WithClientOptions(opts...),
		),
		listOperations: connect.NewClient[emptypb.Empty, v1alpha1.ListOperationsResponse](
			httpClient,
			baseURL+LongRunningOperationServiceListOperationsProcedure,
			connect.WithSchema(longRunningOperationServiceMethods.ByName("ListOperations")),
			connect.WithClientOptions(opts...),
		),
	}
}

// longRunningOperationServiceClient implements LongRunningOperationServiceClient.
type longRunningOperationServiceClient struct {
	getOperation   *connect.Client[v1alpha1.GetOperationRequest, v1alpha1.LongRunningOperation]
	listOperations *connect.Client[emptypb.Empty, v1alpha1.ListOperationsResponse]
}

// GetOperation calls api.proto.v1alpha1.LongRunningOperationService.GetOperation.
func (c *longRunningOperationServiceClient) GetOperation(ctx context.Context, req *connect.Request[v1alpha1.GetOperationRequest]) (*connect.Response[v1alpha1.LongRunningOperation], error) {
	return c.getOperation.CallUnary(ctx, req)
}

// ListOperations calls api.proto.v1alpha1.LongRunningOperationService.ListOperations.
func (c *longRunningOperationServiceClient) ListOperations(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.ListOperationsResponse], error) {
	return c.listOperations.CallUnary(ctx, req)
}

// LongRunningOperationServiceHandler is an implementation of the
// api.proto.v1alpha1.LongRunningOperationService service.
type LongRunningOperationServiceHandler interface {
	// GetOperation retrieves the details of a long-running operation by its name.
	GetOperation(context.Context, *connect.Request[v1alpha1.GetOperationRequest]) (*connect.Response[v1alpha1.LongRunningOperation], error)
	// ListOperations lists all long-running operations.
	ListOperations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.ListOperationsResponse], error)
}

// NewLongRunningOperationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLongRunningOperationServiceHandler(svc LongRunningOperationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	longRunningOperationServiceMethods := v1alpha1.File_api_proto_v1alpha1_longrunningoperation_proto.Services().ByName("LongRunningOperationService").Methods()
	longRunningOperationServiceGetOperationHandler := connect.NewUnaryHandler(
		LongRunningOperationServiceGetOperationProcedure,
		svc.GetOperation,
		connect.WithSchema(longRunningOperationServiceMethods.ByName("GetOperation")),
		connect.WithHandlerOptions(opts...),
	)
	longRunningOperationServiceListOperationsHandler := connect.NewUnaryHandler(
		LongRunningOperationServiceListOperationsProcedure,
		svc.ListOperations,
		connect.WithSchema(longRunningOperationServiceMethods.ByName("ListOperations")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.proto.v1alpha1.LongRunningOperationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LongRunningOperationServiceGetOperationProcedure:
			longRunningOperationServiceGetOperationHandler.ServeHTTP(w, r)
		case LongRunningOperationServiceListOperationsProcedure:
			longRunningOperationServiceListOperationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLongRunningOperationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLongRunningOperationServiceHandler struct{}

func (UnimplementedLongRunningOperationServiceHandler) GetOperation(context.Context, *connect.Request[v1alpha1.GetOperationRequest]) (*connect.Response[v1alpha1.LongRunningOperation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.proto.v1alpha1.LongRunningOperationService.GetOperation is not implemented"))
}

func (UnimplementedLongRunningOperationServiceHandler) ListOperations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.ListOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.proto.v1alpha1.LongRunningOperationService.ListOperations is not implemented"))
}
