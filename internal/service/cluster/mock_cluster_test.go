// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nokamoto/kaas-operator-prototype/internal/service/cluster (interfaces: client,namegen)
//
// Generated by this command:
//
//	mockgen -package cluster -destination mock_cluster_test.go . client,namegen
//

// Package cluster is a generated GoMock package.
package cluster

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/nokamoto/kaas-operator-prototype/api/crd/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
	isgomock struct{}
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *Mockclient) CreatePipeline(ctx context.Context, pipeline *v1alpha1.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockclientMockRecorder) CreatePipeline(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*Mockclient)(nil).CreatePipeline), ctx, pipeline)
}

// Mocknamegen is a mock of namegen interface.
type Mocknamegen struct {
	ctrl     *gomock.Controller
	recorder *MocknamegenMockRecorder
	isgomock struct{}
}

// MocknamegenMockRecorder is the mock recorder for Mocknamegen.
type MocknamegenMockRecorder struct {
	mock *Mocknamegen
}

// NewMocknamegen creates a new mock instance.
func NewMocknamegen(ctrl *gomock.Controller) *Mocknamegen {
	mock := &Mocknamegen{ctrl: ctrl}
	mock.recorder = &MocknamegenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknamegen) EXPECT() *MocknamegenMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *Mocknamegen) New(format string, v ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// New indicates an expected call of New.
func (mr *MocknamegenMockRecorder) New(format any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*Mocknamegen)(nil).New), varargs...)
}
