// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nokamoto/kaas-operator-prototype/internal/service/longrunningoperation (interfaces: client)
//
// Generated by this command:
//
//	mockgen -package longrunningoperation -destination mock_longrunningoperation_test.go . client
//

// Package longrunningoperation is a generated GoMock package.
package longrunningoperation

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/nokamoto/kaas-operator-prototype/api/crd/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
	isgomock struct{}
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// GetKubernetesCluster mocks base method.
func (m *Mockclient) GetKubernetesCluster(ctx context.Context, name, namespace string) (*v1alpha1.KubernetesCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesCluster", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.KubernetesCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesCluster indicates an expected call of GetKubernetesCluster.
func (mr *MockclientMockRecorder) GetKubernetesCluster(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesCluster", reflect.TypeOf((*Mockclient)(nil).GetKubernetesCluster), ctx, name, namespace)
}

// GetKubernetesClusterConfiguration mocks base method.
func (m *Mockclient) GetKubernetesClusterConfiguration(ctx context.Context, name, namespace string) (*v1alpha1.KubernetesClusterConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesClusterConfiguration", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.KubernetesClusterConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesClusterConfiguration indicates an expected call of GetKubernetesClusterConfiguration.
func (mr *MockclientMockRecorder) GetKubernetesClusterConfiguration(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesClusterConfiguration", reflect.TypeOf((*Mockclient)(nil).GetKubernetesClusterConfiguration), ctx, name, namespace)
}

// GetPipeline mocks base method.
func (m *Mockclient) GetPipeline(ctx context.Context, name, namespace string) (*v1alpha1.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, name, namespace)
	ret0, _ := ret[0].(*v1alpha1.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockclientMockRecorder) GetPipeline(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*Mockclient)(nil).GetPipeline), ctx, name, namespace)
}
