// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/proto/v1alpha1/v1alpha1connect (interfaces: ClusterServiceClient)
//
// Generated by this command:
//
//	mockgen ./pkg/api/proto/v1alpha1/v1alpha1connect ClusterServiceClient
//

// Package mock_v1alpha1connect is a generated GoMock package.
package mock_v1alpha1connect

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/nokamoto/kaas-operator-prototype/pkg/api/proto/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockClusterServiceClient is a mock of ClusterServiceClient interface.
type MockClusterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceClientMockRecorder
	isgomock struct{}
}

// MockClusterServiceClientMockRecorder is the mock recorder for MockClusterServiceClient.
type MockClusterServiceClientMockRecorder struct {
	mock *MockClusterServiceClient
}

// NewMockClusterServiceClient creates a new mock instance.
func NewMockClusterServiceClient(ctrl *gomock.Controller) *MockClusterServiceClient {
	mock := &MockClusterServiceClient{ctrl: ctrl}
	mock.recorder = &MockClusterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterServiceClient) EXPECT() *MockClusterServiceClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterServiceClient) CreateCluster(arg0 context.Context, arg1 *connect.Request[v1alpha1.CreateClusterRequest]) (*connect.Response[v1alpha1.LongRunningOperation], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1alpha1.LongRunningOperation])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterServiceClientMockRecorder) CreateCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterServiceClient)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockClusterServiceClient) DeleteCluster(arg0 context.Context, arg1 *connect.Request[v1alpha1.DeleteClusterRequest]) (*connect.Response[v1alpha1.LongRunningOperation], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1alpha1.LongRunningOperation])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterServiceClientMockRecorder) DeleteCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterServiceClient)(nil).DeleteCluster), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockClusterServiceClient) GetCluster(arg0 context.Context, arg1 *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.Cluster], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1alpha1.Cluster])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterServiceClientMockRecorder) GetCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterServiceClient)(nil).GetCluster), arg0, arg1)
}

// ListClusters mocks base method.
func (m *MockClusterServiceClient) ListClusters(arg0 context.Context, arg1 *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.ListClustersResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1alpha1.ListClustersResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClusterServiceClientMockRecorder) ListClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClusterServiceClient)(nil).ListClusters), arg0, arg1)
}
