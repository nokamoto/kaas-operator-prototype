syntax = "proto3";

package api.proto.v1alpha1;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/nokamoto/kaas-operator-prototype/pkg/api/proto/v1alpha1;v1alpha1";

service LongRunningOperationService {
  // GetOperation retrieves the details of a long-running operation by its name.
  rpc GetOperation(GetOperationRequest) returns (LongRunningOperation);
  // ListOperations lists all long-running operations.
  rpc ListOperations(google.protobuf.Empty) returns (ListOperationsResponse);
}

// LongRunningOperation represents a long-running operation in the system.
// It is used to track the status of operations that may take a significant amount of time to complete.
message LongRunningOperation {
  // Required. The unique identifier for the operation.
  // This field is read-only and is set by the system.
  string name = 1;
  bool done = 2;
  google.protobuf.Any metadata = 3;
  google.protobuf.Any response = 4;

  message Pipeline {
    message Spec {
      string name = 1;
      string displayName = 2;
      string description = 3;
    }
    message Status {
      message Condition {
        string message = 1;
        google.protobuf.Timestamp last_transition_time = 2;
      }
      string phase = 1;
      repeated Condition conditions = 2;
      google.protobuf.Timestamp last_synched_time = 3;
    }
    string namespace = 1;
    Spec spec = 2;
    Status status = 3;
  }
}

message GetOperationRequest {
  // Required. The name of the operation to retrieve.
  string name = 1;
}

message ListOperationsResponse {
  // A list of long-running operations.
  repeated LongRunningOperation operations = 1;
}
